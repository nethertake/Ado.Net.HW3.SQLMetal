#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.8825
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ado.Net._6.HW2.SQLMetal
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MCS")]
	public partial class Model1 : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNewEquipment(NewEquipment instance);
    partial void UpdateNewEquipment(NewEquipment instance);
    partial void DeleteNewEquipment(NewEquipment instance);
    partial void InsertTableEquipmentHistory(TableEquipmentHistory instance);
    partial void UpdateTableEquipmentHistory(TableEquipmentHistory instance);
    partial void DeleteTableEquipmentHistory(TableEquipmentHistory instance);
    partial void InsertTablesManufacturer(TablesManufacturer instance);
    partial void UpdateTablesManufacturer(TablesManufacturer instance);
    partial void DeleteTablesManufacturer(TablesManufacturer instance);
    partial void InsertTablesModel(TablesModel instance);
    partial void UpdateTablesModel(TablesModel instance);
    partial void DeleteTablesModel(TablesModel instance);
    partial void InsertTablesStopReason(TablesStopReason instance);
    partial void UpdateTablesStopReason(TablesStopReason instance);
    partial void DeleteTablesStopReason(TablesStopReason instance);
    partial void InsertTrackMeter(TrackMeter instance);
    partial void UpdateTrackMeter(TrackMeter instance);
    partial void DeleteTrackMeter(TrackMeter instance);
    #endregion
		
		public Model1(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Model1(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Model1(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Model1(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<NewEquipment> NewEquipment
		{
			get
			{
				return this.GetTable<NewEquipment>();
			}
		}
		
		public System.Data.Linq.Table<TableEquipmentHistory> TableEquipmentHistory
		{
			get
			{
				return this.GetTable<TableEquipmentHistory>();
			}
		}
		
		public System.Data.Linq.Table<TablesManufacturer> TablesManufacturer
		{
			get
			{
				return this.GetTable<TablesManufacturer>();
			}
		}
		
		public System.Data.Linq.Table<TablesModel> TablesModel
		{
			get
			{
				return this.GetTable<TablesModel>();
			}
		}
		
		public System.Data.Linq.Table<TablesStopReason> TablesStopReason
		{
			get
			{
				return this.GetTable<TablesStopReason>();
			}
		}
		
		public System.Data.Linq.Table<TrackMeter> TrackMeter
		{
			get
			{
				return this.GetTable<TrackMeter>();
			}
		}
	}
	
	[Table(Name="dbo.newEquipment")]
	public partial class NewEquipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IntEquipmentID;
		
		private string _IntGarageRoom;
		
		private int _IntManufacturerID;
		
		private int _IntModelID;
		
		private string _StrManufYear;
		
		private int _IntSNPrefixID;
		
		private string _StrSerialNo;
		
		private int _IntEquipmentTypeID;
		
		private int _IntSMCSFamilyID;
		
		private int _IntSizeID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private double _IntMetered;
		
		private System.DateTime _LastDate;
		
		private double _IntLastMetered;
		
		private double _IntTotalMetered;
		
		private System.Nullable<int> _IntlimitDay;
		
		private System.Nullable<int> _IntlimitWeek;
		
		private bool _BitActive;
		
		private bool _BitPreservation;
		
		private bool _BitMeter;
		
		private bool _BitKTG;
		
		private bool _IsDelete;
		
		private int _IntLocationId;
		
		private string _StrDescription;
		
		private System.Nullable<double> _FloatCostTires;
		
		private System.Nullable<int> _IntCostTiresCurrency;
		
		private System.Nullable<double> _FloatAverageDivergence;
		
		private System.Nullable<double> _FloatFullPrice;
		
		private System.Nullable<int> _IntFullPriceCurrency;
		
		private System.Nullable<System.DateTime> _DateStartUpDate;
		
		private System.Nullable<int> _IntServiceLife;
		
		private System.Nullable<int> _IntHoweverOddsAcceleration;
		
		private bool _BitMethodAmortization;
		
		private EntityRef<TablesManufacturer> _TablesManufacturer;
		
		private EntityRef<TablesModel> _TablesModel;
		
		private EntitySet<TableEquipmentHistory> _TableEquipmentHistory;
		
		private EntitySet<TrackMeter> _TrackMeter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIntEquipmentIDChanging(int value);
    partial void OnIntEquipmentIDChanged();
    partial void OnIntGarageRoomChanging(string value);
    partial void OnIntGarageRoomChanged();
    partial void OnIntManufacturerIDChanging(int value);
    partial void OnIntManufacturerIDChanged();
    partial void OnIntModelIDChanging(int value);
    partial void OnIntModelIDChanged();
    partial void OnStrManufYearChanging(string value);
    partial void OnStrManufYearChanged();
    partial void OnIntSNPrefixIDChanging(int value);
    partial void OnIntSNPrefixIDChanged();
    partial void OnStrSerialNoChanging(string value);
    partial void OnStrSerialNoChanged();
    partial void OnIntEquipmentTypeIDChanging(int value);
    partial void OnIntEquipmentTypeIDChanged();
    partial void OnIntSMCSFamilyIDChanging(int value);
    partial void OnIntSMCSFamilyIDChanged();
    partial void OnIntSizeIDChanging(int value);
    partial void OnIntSizeIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnIntMeteredChanging(double value);
    partial void OnIntMeteredChanged();
    partial void OnLastDateChanging(System.DateTime value);
    partial void OnLastDateChanged();
    partial void OnIntLastMeteredChanging(double value);
    partial void OnIntLastMeteredChanged();
    partial void OnIntTotalMeteredChanging(double value);
    partial void OnIntTotalMeteredChanged();
    partial void OnIntlimitDayChanging(System.Nullable<int> value);
    partial void OnIntlimitDayChanged();
    partial void OnIntlimitWeekChanging(System.Nullable<int> value);
    partial void OnIntlimitWeekChanged();
    partial void OnBitActiveChanging(bool value);
    partial void OnBitActiveChanged();
    partial void OnBitPreservationChanging(bool value);
    partial void OnBitPreservationChanged();
    partial void OnBitMeterChanging(bool value);
    partial void OnBitMeterChanged();
    partial void OnBitKTGChanging(bool value);
    partial void OnBitKTGChanged();
    partial void OnIsDeleteChanging(bool value);
    partial void OnIsDeleteChanged();
    partial void OnIntLocationIdChanging(int value);
    partial void OnIntLocationIdChanged();
    partial void OnStrDescriptionChanging(string value);
    partial void OnStrDescriptionChanged();
    partial void OnFloatCostTiresChanging(System.Nullable<double> value);
    partial void OnFloatCostTiresChanged();
    partial void OnIntCostTiresCurrencyChanging(System.Nullable<int> value);
    partial void OnIntCostTiresCurrencyChanged();
    partial void OnFloatAverageDivergenceChanging(System.Nullable<double> value);
    partial void OnFloatAverageDivergenceChanged();
    partial void OnFloatFullPriceChanging(System.Nullable<double> value);
    partial void OnFloatFullPriceChanged();
    partial void OnIntFullPriceCurrencyChanging(System.Nullable<int> value);
    partial void OnIntFullPriceCurrencyChanged();
    partial void OnDateStartUpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateStartUpDateChanged();
    partial void OnIntServiceLifeChanging(System.Nullable<int> value);
    partial void OnIntServiceLifeChanged();
    partial void OnIntHoweverOddsAccelerationChanging(System.Nullable<int> value);
    partial void OnIntHoweverOddsAccelerationChanged();
    partial void OnBitMethodAmortizationChanging(bool value);
    partial void OnBitMethodAmortizationChanged();
    #endregion
		
		public NewEquipment()
		{
			this._TablesManufacturer = default(EntityRef<TablesManufacturer>);
			this._TablesModel = default(EntityRef<TablesModel>);
			this._TableEquipmentHistory = new EntitySet<TableEquipmentHistory>(new Action<TableEquipmentHistory>(this.attach_TableEquipmentHistory), new Action<TableEquipmentHistory>(this.detach_TableEquipmentHistory));
			this._TrackMeter = new EntitySet<TrackMeter>(new Action<TrackMeter>(this.attach_TrackMeter), new Action<TrackMeter>(this.detach_TrackMeter));
			OnCreated();
		}
		
		[Column(Name="intEquipmentID", Storage="_IntEquipmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IntEquipmentID
		{
			get
			{
				return this._IntEquipmentID;
			}
			set
			{
				if ((this._IntEquipmentID != value))
				{
					this.OnIntEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._IntEquipmentID = value;
					this.SendPropertyChanged("IntEquipmentID");
					this.OnIntEquipmentIDChanged();
				}
			}
		}
		
		[Column(Name="intGarageRoom", Storage="_IntGarageRoom", DbType="NVarChar(50)")]
		public string IntGarageRoom
		{
			get
			{
				return this._IntGarageRoom;
			}
			set
			{
				if ((this._IntGarageRoom != value))
				{
					this.OnIntGarageRoomChanging(value);
					this.SendPropertyChanging();
					this._IntGarageRoom = value;
					this.SendPropertyChanged("IntGarageRoom");
					this.OnIntGarageRoomChanged();
				}
			}
		}
		
		[Column(Name="intManufacturerID", Storage="_IntManufacturerID", DbType="Int NOT NULL")]
		public int IntManufacturerID
		{
			get
			{
				return this._IntManufacturerID;
			}
			set
			{
				if ((this._IntManufacturerID != value))
				{
					this.OnIntManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._IntManufacturerID = value;
					this.SendPropertyChanged("IntManufacturerID");
					this.OnIntManufacturerIDChanged();
				}
			}
		}
		
		[Column(Name="intModelID", Storage="_IntModelID", DbType="Int NOT NULL")]
		public int IntModelID
		{
			get
			{
				return this._IntModelID;
			}
			set
			{
				if ((this._IntModelID != value))
				{
					this.OnIntModelIDChanging(value);
					this.SendPropertyChanging();
					this._IntModelID = value;
					this.SendPropertyChanged("IntModelID");
					this.OnIntModelIDChanged();
				}
			}
		}
		
		[Column(Name="strManufYear", Storage="_StrManufYear", DbType="NVarChar(4)")]
		public string StrManufYear
		{
			get
			{
				return this._StrManufYear;
			}
			set
			{
				if ((this._StrManufYear != value))
				{
					this.OnStrManufYearChanging(value);
					this.SendPropertyChanging();
					this._StrManufYear = value;
					this.SendPropertyChanged("StrManufYear");
					this.OnStrManufYearChanged();
				}
			}
		}
		
		[Column(Name="intSNPrefixID", Storage="_IntSNPrefixID", DbType="Int NOT NULL")]
		public int IntSNPrefixID
		{
			get
			{
				return this._IntSNPrefixID;
			}
			set
			{
				if ((this._IntSNPrefixID != value))
				{
					this.OnIntSNPrefixIDChanging(value);
					this.SendPropertyChanging();
					this._IntSNPrefixID = value;
					this.SendPropertyChanged("IntSNPrefixID");
					this.OnIntSNPrefixIDChanged();
				}
			}
		}
		
		[Column(Name="strSerialNo", Storage="_StrSerialNo", DbType="NVarChar(20)")]
		public string StrSerialNo
		{
			get
			{
				return this._StrSerialNo;
			}
			set
			{
				if ((this._StrSerialNo != value))
				{
					this.OnStrSerialNoChanging(value);
					this.SendPropertyChanging();
					this._StrSerialNo = value;
					this.SendPropertyChanged("StrSerialNo");
					this.OnStrSerialNoChanged();
				}
			}
		}
		
		[Column(Name="intEquipmentTypeID", Storage="_IntEquipmentTypeID", DbType="Int NOT NULL")]
		public int IntEquipmentTypeID
		{
			get
			{
				return this._IntEquipmentTypeID;
			}
			set
			{
				if ((this._IntEquipmentTypeID != value))
				{
					this.OnIntEquipmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._IntEquipmentTypeID = value;
					this.SendPropertyChanged("IntEquipmentTypeID");
					this.OnIntEquipmentTypeIDChanged();
				}
			}
		}
		
		[Column(Name="intSMCSFamilyID", Storage="_IntSMCSFamilyID", DbType="Int NOT NULL")]
		public int IntSMCSFamilyID
		{
			get
			{
				return this._IntSMCSFamilyID;
			}
			set
			{
				if ((this._IntSMCSFamilyID != value))
				{
					this.OnIntSMCSFamilyIDChanging(value);
					this.SendPropertyChanging();
					this._IntSMCSFamilyID = value;
					this.SendPropertyChanged("IntSMCSFamilyID");
					this.OnIntSMCSFamilyIDChanged();
				}
			}
		}
		
		[Column(Name="intSizeID", Storage="_IntSizeID", DbType="Int NOT NULL")]
		public int IntSizeID
		{
			get
			{
				return this._IntSizeID;
			}
			set
			{
				if ((this._IntSizeID != value))
				{
					this.OnIntSizeIDChanging(value);
					this.SendPropertyChanging();
					this._IntSizeID = value;
					this.SendPropertyChanged("IntSizeID");
					this.OnIntSizeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="Date")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Name="intMetered", Storage="_IntMetered", DbType="Float NOT NULL")]
		public double IntMetered
		{
			get
			{
				return this._IntMetered;
			}
			set
			{
				if ((this._IntMetered != value))
				{
					this.OnIntMeteredChanging(value);
					this.SendPropertyChanging();
					this._IntMetered = value;
					this.SendPropertyChanged("IntMetered");
					this.OnIntMeteredChanged();
				}
			}
		}
		
		[Column(Storage="_LastDate", DbType="Date NOT NULL")]
		public System.DateTime LastDate
		{
			get
			{
				return this._LastDate;
			}
			set
			{
				if ((this._LastDate != value))
				{
					this.OnLastDateChanging(value);
					this.SendPropertyChanging();
					this._LastDate = value;
					this.SendPropertyChanged("LastDate");
					this.OnLastDateChanged();
				}
			}
		}
		
		[Column(Name="intLastMetered", Storage="_IntLastMetered", DbType="Float NOT NULL")]
		public double IntLastMetered
		{
			get
			{
				return this._IntLastMetered;
			}
			set
			{
				if ((this._IntLastMetered != value))
				{
					this.OnIntLastMeteredChanging(value);
					this.SendPropertyChanging();
					this._IntLastMetered = value;
					this.SendPropertyChanged("IntLastMetered");
					this.OnIntLastMeteredChanged();
				}
			}
		}
		
		[Column(Name="intTotalMetered", Storage="_IntTotalMetered", DbType="Float NOT NULL")]
		public double IntTotalMetered
		{
			get
			{
				return this._IntTotalMetered;
			}
			set
			{
				if ((this._IntTotalMetered != value))
				{
					this.OnIntTotalMeteredChanging(value);
					this.SendPropertyChanging();
					this._IntTotalMetered = value;
					this.SendPropertyChanged("IntTotalMetered");
					this.OnIntTotalMeteredChanged();
				}
			}
		}
		
		[Column(Name="intlimitDay", Storage="_IntlimitDay", DbType="Int")]
		public System.Nullable<int> IntlimitDay
		{
			get
			{
				return this._IntlimitDay;
			}
			set
			{
				if ((this._IntlimitDay != value))
				{
					this.OnIntlimitDayChanging(value);
					this.SendPropertyChanging();
					this._IntlimitDay = value;
					this.SendPropertyChanged("IntlimitDay");
					this.OnIntlimitDayChanged();
				}
			}
		}
		
		[Column(Name="intlimitWeek", Storage="_IntlimitWeek", DbType="Int")]
		public System.Nullable<int> IntlimitWeek
		{
			get
			{
				return this._IntlimitWeek;
			}
			set
			{
				if ((this._IntlimitWeek != value))
				{
					this.OnIntlimitWeekChanging(value);
					this.SendPropertyChanging();
					this._IntlimitWeek = value;
					this.SendPropertyChanged("IntlimitWeek");
					this.OnIntlimitWeekChanged();
				}
			}
		}
		
		[Column(Name="bitActive", Storage="_BitActive", DbType="Bit NOT NULL")]
		public bool BitActive
		{
			get
			{
				return this._BitActive;
			}
			set
			{
				if ((this._BitActive != value))
				{
					this.OnBitActiveChanging(value);
					this.SendPropertyChanging();
					this._BitActive = value;
					this.SendPropertyChanged("BitActive");
					this.OnBitActiveChanged();
				}
			}
		}
		
		[Column(Name="bitPreservation", Storage="_BitPreservation", DbType="Bit NOT NULL")]
		public bool BitPreservation
		{
			get
			{
				return this._BitPreservation;
			}
			set
			{
				if ((this._BitPreservation != value))
				{
					this.OnBitPreservationChanging(value);
					this.SendPropertyChanging();
					this._BitPreservation = value;
					this.SendPropertyChanged("BitPreservation");
					this.OnBitPreservationChanged();
				}
			}
		}
		
		[Column(Name="bitMeter", Storage="_BitMeter", DbType="Bit NOT NULL")]
		public bool BitMeter
		{
			get
			{
				return this._BitMeter;
			}
			set
			{
				if ((this._BitMeter != value))
				{
					this.OnBitMeterChanging(value);
					this.SendPropertyChanging();
					this._BitMeter = value;
					this.SendPropertyChanged("BitMeter");
					this.OnBitMeterChanged();
				}
			}
		}
		
		[Column(Name="bitKTG", Storage="_BitKTG", DbType="Bit NOT NULL")]
		public bool BitKTG
		{
			get
			{
				return this._BitKTG;
			}
			set
			{
				if ((this._BitKTG != value))
				{
					this.OnBitKTGChanging(value);
					this.SendPropertyChanging();
					this._BitKTG = value;
					this.SendPropertyChanged("BitKTG");
					this.OnBitKTGChanged();
				}
			}
		}
		
		[Column(Name="isDelete", Storage="_IsDelete", DbType="Bit NOT NULL")]
		public bool IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[Column(Name="intLocationId", Storage="_IntLocationId", DbType="Int NOT NULL")]
		public int IntLocationId
		{
			get
			{
				return this._IntLocationId;
			}
			set
			{
				if ((this._IntLocationId != value))
				{
					this.OnIntLocationIdChanging(value);
					this.SendPropertyChanging();
					this._IntLocationId = value;
					this.SendPropertyChanged("IntLocationId");
					this.OnIntLocationIdChanged();
				}
			}
		}
		
		[Column(Name="strDescription", Storage="_StrDescription", DbType="NVarChar(1050)")]
		public string StrDescription
		{
			get
			{
				return this._StrDescription;
			}
			set
			{
				if ((this._StrDescription != value))
				{
					this.OnStrDescriptionChanging(value);
					this.SendPropertyChanging();
					this._StrDescription = value;
					this.SendPropertyChanged("StrDescription");
					this.OnStrDescriptionChanged();
				}
			}
		}
		
		[Column(Name="floatCostTires", Storage="_FloatCostTires", DbType="Float")]
		public System.Nullable<double> FloatCostTires
		{
			get
			{
				return this._FloatCostTires;
			}
			set
			{
				if ((this._FloatCostTires != value))
				{
					this.OnFloatCostTiresChanging(value);
					this.SendPropertyChanging();
					this._FloatCostTires = value;
					this.SendPropertyChanged("FloatCostTires");
					this.OnFloatCostTiresChanged();
				}
			}
		}
		
		[Column(Name="intCostTiresCurrency", Storage="_IntCostTiresCurrency", DbType="Int")]
		public System.Nullable<int> IntCostTiresCurrency
		{
			get
			{
				return this._IntCostTiresCurrency;
			}
			set
			{
				if ((this._IntCostTiresCurrency != value))
				{
					this.OnIntCostTiresCurrencyChanging(value);
					this.SendPropertyChanging();
					this._IntCostTiresCurrency = value;
					this.SendPropertyChanged("IntCostTiresCurrency");
					this.OnIntCostTiresCurrencyChanged();
				}
			}
		}
		
		[Column(Name="floatAverageDivergence", Storage="_FloatAverageDivergence", DbType="Float")]
		public System.Nullable<double> FloatAverageDivergence
		{
			get
			{
				return this._FloatAverageDivergence;
			}
			set
			{
				if ((this._FloatAverageDivergence != value))
				{
					this.OnFloatAverageDivergenceChanging(value);
					this.SendPropertyChanging();
					this._FloatAverageDivergence = value;
					this.SendPropertyChanged("FloatAverageDivergence");
					this.OnFloatAverageDivergenceChanged();
				}
			}
		}
		
		[Column(Name="floatFullPrice", Storage="_FloatFullPrice", DbType="Float")]
		public System.Nullable<double> FloatFullPrice
		{
			get
			{
				return this._FloatFullPrice;
			}
			set
			{
				if ((this._FloatFullPrice != value))
				{
					this.OnFloatFullPriceChanging(value);
					this.SendPropertyChanging();
					this._FloatFullPrice = value;
					this.SendPropertyChanged("FloatFullPrice");
					this.OnFloatFullPriceChanged();
				}
			}
		}
		
		[Column(Name="intFullPriceCurrency", Storage="_IntFullPriceCurrency", DbType="Int")]
		public System.Nullable<int> IntFullPriceCurrency
		{
			get
			{
				return this._IntFullPriceCurrency;
			}
			set
			{
				if ((this._IntFullPriceCurrency != value))
				{
					this.OnIntFullPriceCurrencyChanging(value);
					this.SendPropertyChanging();
					this._IntFullPriceCurrency = value;
					this.SendPropertyChanged("IntFullPriceCurrency");
					this.OnIntFullPriceCurrencyChanged();
				}
			}
		}
		
		[Column(Name="dateStartUpDate", Storage="_DateStartUpDate", DbType="Date")]
		public System.Nullable<System.DateTime> DateStartUpDate
		{
			get
			{
				return this._DateStartUpDate;
			}
			set
			{
				if ((this._DateStartUpDate != value))
				{
					this.OnDateStartUpDateChanging(value);
					this.SendPropertyChanging();
					this._DateStartUpDate = value;
					this.SendPropertyChanged("DateStartUpDate");
					this.OnDateStartUpDateChanged();
				}
			}
		}
		
		[Column(Name="intServiceLife", Storage="_IntServiceLife", DbType="Int")]
		public System.Nullable<int> IntServiceLife
		{
			get
			{
				return this._IntServiceLife;
			}
			set
			{
				if ((this._IntServiceLife != value))
				{
					this.OnIntServiceLifeChanging(value);
					this.SendPropertyChanging();
					this._IntServiceLife = value;
					this.SendPropertyChanged("IntServiceLife");
					this.OnIntServiceLifeChanged();
				}
			}
		}
		
		[Column(Name="intHoweverOddsAcceleration", Storage="_IntHoweverOddsAcceleration", DbType="Int")]
		public System.Nullable<int> IntHoweverOddsAcceleration
		{
			get
			{
				return this._IntHoweverOddsAcceleration;
			}
			set
			{
				if ((this._IntHoweverOddsAcceleration != value))
				{
					this.OnIntHoweverOddsAccelerationChanging(value);
					this.SendPropertyChanging();
					this._IntHoweverOddsAcceleration = value;
					this.SendPropertyChanged("IntHoweverOddsAcceleration");
					this.OnIntHoweverOddsAccelerationChanged();
				}
			}
		}
		
		[Column(Name="bitMethodAmortization", Storage="_BitMethodAmortization", DbType="Bit NOT NULL")]
		public bool BitMethodAmortization
		{
			get
			{
				return this._BitMethodAmortization;
			}
			set
			{
				if ((this._BitMethodAmortization != value))
				{
					this.OnBitMethodAmortizationChanging(value);
					this.SendPropertyChanging();
					this._BitMethodAmortization = value;
					this.SendPropertyChanged("BitMethodAmortization");
					this.OnBitMethodAmortizationChanged();
				}
			}
		}
		
		[Association(Name="FK_newEquipment_TablesManufacturer", Storage="_TablesManufacturer", ThisKey="IntManufacturerID", OtherKey="IntManufacturerID", IsForeignKey=true)]
		public TablesManufacturer TablesManufacturer
		{
			get
			{
				return this._TablesManufacturer.Entity;
			}
			set
			{
				TablesManufacturer previousValue = this._TablesManufacturer.Entity;
				if (((previousValue != value) 
							|| (this._TablesManufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TablesManufacturer.Entity = null;
						previousValue.NewEquipment.Remove(this);
					}
					this._TablesManufacturer.Entity = value;
					if ((value != null))
					{
						value.NewEquipment.Add(this);
						this._IntManufacturerID = value.IntManufacturerID;
					}
					else
					{
						this._IntManufacturerID = default(int);
					}
					this.SendPropertyChanged("TablesManufacturer");
				}
			}
		}
		
		[Association(Name="FK_newEquipment_TablesModel", Storage="_TablesModel", ThisKey="IntModelID", OtherKey="IntModelID", IsForeignKey=true)]
		public TablesModel TablesModel
		{
			get
			{
				return this._TablesModel.Entity;
			}
			set
			{
				TablesModel previousValue = this._TablesModel.Entity;
				if (((previousValue != value) 
							|| (this._TablesModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TablesModel.Entity = null;
						previousValue.NewEquipment.Remove(this);
					}
					this._TablesModel.Entity = value;
					if ((value != null))
					{
						value.NewEquipment.Add(this);
						this._IntModelID = value.IntModelID;
					}
					else
					{
						this._IntModelID = default(int);
					}
					this.SendPropertyChanged("TablesModel");
				}
			}
		}
		
		[Association(Name="FK_TableEquipmentHistory_newEquipment", Storage="_TableEquipmentHistory", ThisKey="IntEquipmentID", OtherKey="IntEquipmentID", DeleteRule="NO ACTION")]
		public EntitySet<TableEquipmentHistory> TableEquipmentHistory
		{
			get
			{
				return this._TableEquipmentHistory;
			}
			set
			{
				this._TableEquipmentHistory.Assign(value);
			}
		}
		
		[Association(Name="FK_TrackMeter_newEquipment", Storage="_TrackMeter", ThisKey="IntEquipmentID", OtherKey="IntEquipmentID", DeleteRule="NO ACTION")]
		public EntitySet<TrackMeter> TrackMeter
		{
			get
			{
				return this._TrackMeter;
			}
			set
			{
				this._TrackMeter.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TableEquipmentHistory(TableEquipmentHistory entity)
		{
			this.SendPropertyChanging();
			entity.NewEquipment = this;
		}
		
		private void detach_TableEquipmentHistory(TableEquipmentHistory entity)
		{
			this.SendPropertyChanging();
			entity.NewEquipment = null;
		}
		
		private void attach_TrackMeter(TrackMeter entity)
		{
			this.SendPropertyChanging();
			entity.NewEquipment = this;
		}
		
		private void detach_TrackMeter(TrackMeter entity)
		{
			this.SendPropertyChanging();
			entity.NewEquipment = null;
		}
	}
	
	[Table(Name="dbo.TableEquipmentHistory")]
	public partial class TableEquipmentHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IntEquipmentHistoryId;
		
		private System.Nullable<int> _IntEquipmentID;
		
		private System.Nullable<int> _IntTypeHistory;
		
		private System.Nullable<System.DateTime> _DStartDate;
		
		private System.Nullable<System.DateTime> _DEndDate;
		
		private System.Nullable<int> _IntDaysCount;
		
		private System.Nullable<int> _IntStatys;
		
		private System.Nullable<int> _IntUserId;
		
		private System.Nullable<System.DateTime> _DCahengeDate;
		
		private EntityRef<NewEquipment> _NewEquipment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIntEquipmentHistoryIdChanging(int value);
    partial void OnIntEquipmentHistoryIdChanged();
    partial void OnIntEquipmentIDChanging(System.Nullable<int> value);
    partial void OnIntEquipmentIDChanged();
    partial void OnIntTypeHistoryChanging(System.Nullable<int> value);
    partial void OnIntTypeHistoryChanged();
    partial void OnDStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDStartDateChanged();
    partial void OnDEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDEndDateChanged();
    partial void OnIntDaysCountChanging(System.Nullable<int> value);
    partial void OnIntDaysCountChanged();
    partial void OnIntStatysChanging(System.Nullable<int> value);
    partial void OnIntStatysChanged();
    partial void OnIntUserIdChanging(System.Nullable<int> value);
    partial void OnIntUserIdChanged();
    partial void OnDCahengeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDCahengeDateChanged();
    #endregion
		
		public TableEquipmentHistory()
		{
			this._NewEquipment = default(EntityRef<NewEquipment>);
			OnCreated();
		}
		
		[Column(Name="intEquipmentHistoryId", Storage="_IntEquipmentHistoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IntEquipmentHistoryId
		{
			get
			{
				return this._IntEquipmentHistoryId;
			}
			set
			{
				if ((this._IntEquipmentHistoryId != value))
				{
					this.OnIntEquipmentHistoryIdChanging(value);
					this.SendPropertyChanging();
					this._IntEquipmentHistoryId = value;
					this.SendPropertyChanged("IntEquipmentHistoryId");
					this.OnIntEquipmentHistoryIdChanged();
				}
			}
		}
		
		[Column(Name="intEquipmentID", Storage="_IntEquipmentID", DbType="Int")]
		public System.Nullable<int> IntEquipmentID
		{
			get
			{
				return this._IntEquipmentID;
			}
			set
			{
				if ((this._IntEquipmentID != value))
				{
					this.OnIntEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._IntEquipmentID = value;
					this.SendPropertyChanged("IntEquipmentID");
					this.OnIntEquipmentIDChanged();
				}
			}
		}
		
		[Column(Name="intTypeHistory", Storage="_IntTypeHistory", DbType="Int")]
		public System.Nullable<int> IntTypeHistory
		{
			get
			{
				return this._IntTypeHistory;
			}
			set
			{
				if ((this._IntTypeHistory != value))
				{
					this.OnIntTypeHistoryChanging(value);
					this.SendPropertyChanging();
					this._IntTypeHistory = value;
					this.SendPropertyChanged("IntTypeHistory");
					this.OnIntTypeHistoryChanged();
				}
			}
		}
		
		[Column(Name="dStartDate", Storage="_DStartDate", DbType="Date")]
		public System.Nullable<System.DateTime> DStartDate
		{
			get
			{
				return this._DStartDate;
			}
			set
			{
				if ((this._DStartDate != value))
				{
					this.OnDStartDateChanging(value);
					this.SendPropertyChanging();
					this._DStartDate = value;
					this.SendPropertyChanged("DStartDate");
					this.OnDStartDateChanged();
				}
			}
		}
		
		[Column(Name="dEndDate", Storage="_DEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> DEndDate
		{
			get
			{
				return this._DEndDate;
			}
			set
			{
				if ((this._DEndDate != value))
				{
					this.OnDEndDateChanging(value);
					this.SendPropertyChanging();
					this._DEndDate = value;
					this.SendPropertyChanged("DEndDate");
					this.OnDEndDateChanged();
				}
			}
		}
		
		[Column(Name="intDaysCount", Storage="_IntDaysCount", DbType="Int")]
		public System.Nullable<int> IntDaysCount
		{
			get
			{
				return this._IntDaysCount;
			}
			set
			{
				if ((this._IntDaysCount != value))
				{
					this.OnIntDaysCountChanging(value);
					this.SendPropertyChanging();
					this._IntDaysCount = value;
					this.SendPropertyChanged("IntDaysCount");
					this.OnIntDaysCountChanged();
				}
			}
		}
		
		[Column(Name="intStatys", Storage="_IntStatys", DbType="Int")]
		public System.Nullable<int> IntStatys
		{
			get
			{
				return this._IntStatys;
			}
			set
			{
				if ((this._IntStatys != value))
				{
					this.OnIntStatysChanging(value);
					this.SendPropertyChanging();
					this._IntStatys = value;
					this.SendPropertyChanged("IntStatys");
					this.OnIntStatysChanged();
				}
			}
		}
		
		[Column(Name="intUserId", Storage="_IntUserId", DbType="Int")]
		public System.Nullable<int> IntUserId
		{
			get
			{
				return this._IntUserId;
			}
			set
			{
				if ((this._IntUserId != value))
				{
					this.OnIntUserIdChanging(value);
					this.SendPropertyChanging();
					this._IntUserId = value;
					this.SendPropertyChanged("IntUserId");
					this.OnIntUserIdChanged();
				}
			}
		}
		
		[Column(Name="dCahengeDate", Storage="_DCahengeDate", DbType="Date")]
		public System.Nullable<System.DateTime> DCahengeDate
		{
			get
			{
				return this._DCahengeDate;
			}
			set
			{
				if ((this._DCahengeDate != value))
				{
					this.OnDCahengeDateChanging(value);
					this.SendPropertyChanging();
					this._DCahengeDate = value;
					this.SendPropertyChanged("DCahengeDate");
					this.OnDCahengeDateChanged();
				}
			}
		}
		
		[Association(Name="FK_TableEquipmentHistory_newEquipment", Storage="_NewEquipment", ThisKey="IntEquipmentID", OtherKey="IntEquipmentID", IsForeignKey=true)]
		public NewEquipment NewEquipment
		{
			get
			{
				return this._NewEquipment.Entity;
			}
			set
			{
				NewEquipment previousValue = this._NewEquipment.Entity;
				if (((previousValue != value) 
							|| (this._NewEquipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewEquipment.Entity = null;
						previousValue.TableEquipmentHistory.Remove(this);
					}
					this._NewEquipment.Entity = value;
					if ((value != null))
					{
						value.TableEquipmentHistory.Add(this);
						this._IntEquipmentID = value.IntEquipmentID;
					}
					else
					{
						this._IntEquipmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("NewEquipment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TablesManufacturer")]
	public partial class TablesManufacturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IntManufacturerID;
		
		private string _StrManufacturerChecklistId;
		
		private string _StrName;
		
		private EntitySet<NewEquipment> _NewEquipment;
		
		private EntitySet<TablesModel> _TablesModel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIntManufacturerIDChanging(int value);
    partial void OnIntManufacturerIDChanged();
    partial void OnStrManufacturerChecklistIdChanging(string value);
    partial void OnStrManufacturerChecklistIdChanged();
    partial void OnStrNameChanging(string value);
    partial void OnStrNameChanged();
    #endregion
		
		public TablesManufacturer()
		{
			this._NewEquipment = new EntitySet<NewEquipment>(new Action<NewEquipment>(this.attach_NewEquipment), new Action<NewEquipment>(this.detach_NewEquipment));
			this._TablesModel = new EntitySet<TablesModel>(new Action<TablesModel>(this.attach_TablesModel), new Action<TablesModel>(this.detach_TablesModel));
			OnCreated();
		}
		
		[Column(Name="intManufacturerID", Storage="_IntManufacturerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IntManufacturerID
		{
			get
			{
				return this._IntManufacturerID;
			}
			set
			{
				if ((this._IntManufacturerID != value))
				{
					this.OnIntManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._IntManufacturerID = value;
					this.SendPropertyChanged("IntManufacturerID");
					this.OnIntManufacturerIDChanged();
				}
			}
		}
		
		[Column(Name="strManufacturerChecklistId", Storage="_StrManufacturerChecklistId", DbType="NVarChar(50)")]
		public string StrManufacturerChecklistId
		{
			get
			{
				return this._StrManufacturerChecklistId;
			}
			set
			{
				if ((this._StrManufacturerChecklistId != value))
				{
					this.OnStrManufacturerChecklistIdChanging(value);
					this.SendPropertyChanging();
					this._StrManufacturerChecklistId = value;
					this.SendPropertyChanged("StrManufacturerChecklistId");
					this.OnStrManufacturerChecklistIdChanged();
				}
			}
		}
		
		[Column(Name="strName", Storage="_StrName", DbType="NVarChar(50)")]
		public string StrName
		{
			get
			{
				return this._StrName;
			}
			set
			{
				if ((this._StrName != value))
				{
					this.OnStrNameChanging(value);
					this.SendPropertyChanging();
					this._StrName = value;
					this.SendPropertyChanged("StrName");
					this.OnStrNameChanged();
				}
			}
		}
		
		[Association(Name="FK_newEquipment_TablesManufacturer", Storage="_NewEquipment", ThisKey="IntManufacturerID", OtherKey="IntManufacturerID", DeleteRule="NO ACTION")]
		public EntitySet<NewEquipment> NewEquipment
		{
			get
			{
				return this._NewEquipment;
			}
			set
			{
				this._NewEquipment.Assign(value);
			}
		}
		
		[Association(Name="FK_newTablesModel_newTablesModel", Storage="_TablesModel", ThisKey="IntManufacturerID", OtherKey="IntManufacturerID", DeleteRule="NO ACTION")]
		public EntitySet<TablesModel> TablesModel
		{
			get
			{
				return this._TablesModel;
			}
			set
			{
				this._TablesModel.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NewEquipment(NewEquipment entity)
		{
			this.SendPropertyChanging();
			entity.TablesManufacturer = this;
		}
		
		private void detach_NewEquipment(NewEquipment entity)
		{
			this.SendPropertyChanging();
			entity.TablesManufacturer = null;
		}
		
		private void attach_TablesModel(TablesModel entity)
		{
			this.SendPropertyChanging();
			entity.TablesManufacturer = this;
		}
		
		private void detach_TablesModel(TablesModel entity)
		{
			this.SendPropertyChanging();
			entity.TablesManufacturer = null;
		}
	}
	
	[Table(Name="dbo.TablesModel")]
	public partial class TablesModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IntModelID;
		
		private string _StrName;
		
		private System.Nullable<int> _IntManufacturerID;
		
		private System.Nullable<int> _IntSMCSFamilyID;
		
		private string _StrImage;
		
		private EntitySet<NewEquipment> _NewEquipment;
		
		private EntityRef<TablesManufacturer> _TablesManufacturer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIntModelIDChanging(int value);
    partial void OnIntModelIDChanged();
    partial void OnStrNameChanging(string value);
    partial void OnStrNameChanged();
    partial void OnIntManufacturerIDChanging(System.Nullable<int> value);
    partial void OnIntManufacturerIDChanged();
    partial void OnIntSMCSFamilyIDChanging(System.Nullable<int> value);
    partial void OnIntSMCSFamilyIDChanged();
    partial void OnStrImageChanging(string value);
    partial void OnStrImageChanged();
    #endregion
		
		public TablesModel()
		{
			this._NewEquipment = new EntitySet<NewEquipment>(new Action<NewEquipment>(this.attach_NewEquipment), new Action<NewEquipment>(this.detach_NewEquipment));
			this._TablesManufacturer = default(EntityRef<TablesManufacturer>);
			OnCreated();
		}
		
		[Column(Name="intModelID", Storage="_IntModelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IntModelID
		{
			get
			{
				return this._IntModelID;
			}
			set
			{
				if ((this._IntModelID != value))
				{
					this.OnIntModelIDChanging(value);
					this.SendPropertyChanging();
					this._IntModelID = value;
					this.SendPropertyChanged("IntModelID");
					this.OnIntModelIDChanged();
				}
			}
		}
		
		[Column(Name="strName", Storage="_StrName", DbType="NVarChar(10)")]
		public string StrName
		{
			get
			{
				return this._StrName;
			}
			set
			{
				if ((this._StrName != value))
				{
					this.OnStrNameChanging(value);
					this.SendPropertyChanging();
					this._StrName = value;
					this.SendPropertyChanged("StrName");
					this.OnStrNameChanged();
				}
			}
		}
		
		[Column(Name="intManufacturerID", Storage="_IntManufacturerID", DbType="Int")]
		public System.Nullable<int> IntManufacturerID
		{
			get
			{
				return this._IntManufacturerID;
			}
			set
			{
				if ((this._IntManufacturerID != value))
				{
					this.OnIntManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._IntManufacturerID = value;
					this.SendPropertyChanged("IntManufacturerID");
					this.OnIntManufacturerIDChanged();
				}
			}
		}
		
		[Column(Name="intSMCSFamilyID", Storage="_IntSMCSFamilyID", DbType="Int")]
		public System.Nullable<int> IntSMCSFamilyID
		{
			get
			{
				return this._IntSMCSFamilyID;
			}
			set
			{
				if ((this._IntSMCSFamilyID != value))
				{
					this.OnIntSMCSFamilyIDChanging(value);
					this.SendPropertyChanging();
					this._IntSMCSFamilyID = value;
					this.SendPropertyChanged("IntSMCSFamilyID");
					this.OnIntSMCSFamilyIDChanged();
				}
			}
		}
		
		[Column(Name="strImage", Storage="_StrImage", DbType="NVarChar(250)")]
		public string StrImage
		{
			get
			{
				return this._StrImage;
			}
			set
			{
				if ((this._StrImage != value))
				{
					this.OnStrImageChanging(value);
					this.SendPropertyChanging();
					this._StrImage = value;
					this.SendPropertyChanged("StrImage");
					this.OnStrImageChanged();
				}
			}
		}
		
		[Association(Name="FK_newEquipment_TablesModel", Storage="_NewEquipment", ThisKey="IntModelID", OtherKey="IntModelID", DeleteRule="NO ACTION")]
		public EntitySet<NewEquipment> NewEquipment
		{
			get
			{
				return this._NewEquipment;
			}
			set
			{
				this._NewEquipment.Assign(value);
			}
		}
		
		[Association(Name="FK_newTablesModel_newTablesModel", Storage="_TablesManufacturer", ThisKey="IntManufacturerID", OtherKey="IntManufacturerID", IsForeignKey=true)]
		public TablesManufacturer TablesManufacturer
		{
			get
			{
				return this._TablesManufacturer.Entity;
			}
			set
			{
				TablesManufacturer previousValue = this._TablesManufacturer.Entity;
				if (((previousValue != value) 
							|| (this._TablesManufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TablesManufacturer.Entity = null;
						previousValue.TablesModel.Remove(this);
					}
					this._TablesManufacturer.Entity = value;
					if ((value != null))
					{
						value.TablesModel.Add(this);
						this._IntManufacturerID = value.IntManufacturerID;
					}
					else
					{
						this._IntManufacturerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TablesManufacturer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NewEquipment(NewEquipment entity)
		{
			this.SendPropertyChanging();
			entity.TablesModel = this;
		}
		
		private void detach_NewEquipment(NewEquipment entity)
		{
			this.SendPropertyChanging();
			entity.TablesModel = null;
		}
	}
	
	[Table(Name="dbo.TablesStopReason")]
	public partial class TablesStopReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IntStopReason;
		
		private string _StrReason;
		
		private bool _BitDowntime;
		
		private bool _BitUnscheduled;
		
		private bool _BitPMStoppages;
		
		private bool _BitScheduledRepairsAndOther;
		
		private int _IntLocationId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIntStopReasonChanging(int value);
    partial void OnIntStopReasonChanged();
    partial void OnStrReasonChanging(string value);
    partial void OnStrReasonChanged();
    partial void OnBitDowntimeChanging(bool value);
    partial void OnBitDowntimeChanged();
    partial void OnBitUnscheduledChanging(bool value);
    partial void OnBitUnscheduledChanged();
    partial void OnBitPMStoppagesChanging(bool value);
    partial void OnBitPMStoppagesChanged();
    partial void OnBitScheduledRepairsAndOtherChanging(bool value);
    partial void OnBitScheduledRepairsAndOtherChanged();
    partial void OnIntLocationIdChanging(int value);
    partial void OnIntLocationIdChanged();
    #endregion
		
		public TablesStopReason()
		{
			OnCreated();
		}
		
		[Column(Name="intStopReason", Storage="_IntStopReason", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IntStopReason
		{
			get
			{
				return this._IntStopReason;
			}
			set
			{
				if ((this._IntStopReason != value))
				{
					this.OnIntStopReasonChanging(value);
					this.SendPropertyChanging();
					this._IntStopReason = value;
					this.SendPropertyChanged("IntStopReason");
					this.OnIntStopReasonChanged();
				}
			}
		}
		
		[Column(Name="strReason", Storage="_StrReason", DbType="NVarChar(255)")]
		public string StrReason
		{
			get
			{
				return this._StrReason;
			}
			set
			{
				if ((this._StrReason != value))
				{
					this.OnStrReasonChanging(value);
					this.SendPropertyChanging();
					this._StrReason = value;
					this.SendPropertyChanged("StrReason");
					this.OnStrReasonChanged();
				}
			}
		}
		
		[Column(Name="bitDowntime", Storage="_BitDowntime", DbType="Bit NOT NULL")]
		public bool BitDowntime
		{
			get
			{
				return this._BitDowntime;
			}
			set
			{
				if ((this._BitDowntime != value))
				{
					this.OnBitDowntimeChanging(value);
					this.SendPropertyChanging();
					this._BitDowntime = value;
					this.SendPropertyChanged("BitDowntime");
					this.OnBitDowntimeChanged();
				}
			}
		}
		
		[Column(Name="bitUnscheduled", Storage="_BitUnscheduled", DbType="Bit NOT NULL")]
		public bool BitUnscheduled
		{
			get
			{
				return this._BitUnscheduled;
			}
			set
			{
				if ((this._BitUnscheduled != value))
				{
					this.OnBitUnscheduledChanging(value);
					this.SendPropertyChanging();
					this._BitUnscheduled = value;
					this.SendPropertyChanged("BitUnscheduled");
					this.OnBitUnscheduledChanged();
				}
			}
		}
		
		[Column(Name="bitPMStoppages", Storage="_BitPMStoppages", DbType="Bit NOT NULL")]
		public bool BitPMStoppages
		{
			get
			{
				return this._BitPMStoppages;
			}
			set
			{
				if ((this._BitPMStoppages != value))
				{
					this.OnBitPMStoppagesChanging(value);
					this.SendPropertyChanging();
					this._BitPMStoppages = value;
					this.SendPropertyChanged("BitPMStoppages");
					this.OnBitPMStoppagesChanged();
				}
			}
		}
		
		[Column(Name="bitScheduledRepairsAndOther", Storage="_BitScheduledRepairsAndOther", DbType="Bit NOT NULL")]
		public bool BitScheduledRepairsAndOther
		{
			get
			{
				return this._BitScheduledRepairsAndOther;
			}
			set
			{
				if ((this._BitScheduledRepairsAndOther != value))
				{
					this.OnBitScheduledRepairsAndOtherChanging(value);
					this.SendPropertyChanging();
					this._BitScheduledRepairsAndOther = value;
					this.SendPropertyChanged("BitScheduledRepairsAndOther");
					this.OnBitScheduledRepairsAndOtherChanged();
				}
			}
		}
		
		[Column(Name="intLocationId", Storage="_IntLocationId", DbType="Int NOT NULL")]
		public int IntLocationId
		{
			get
			{
				return this._IntLocationId;
			}
			set
			{
				if ((this._IntLocationId != value))
				{
					this.OnIntLocationIdChanging(value);
					this.SendPropertyChanging();
					this._IntLocationId = value;
					this.SendPropertyChanged("IntLocationId");
					this.OnIntLocationIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TrackMeter")]
	public partial class TrackMeter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IntMeteredId;
		
		private int _IntEquipmentID;
		
		private System.DateTime _DMeterDate;
		
		private double _IntMeterReading;
		
		private System.Nullable<double> _IntHoursHoursOperation;
		
		private System.Nullable<double> _IntTotalMeter;
		
		private bool _BoolMeterReplaced;
		
		private int _IntTypeMetered;
		
		private System.Nullable<int> _IntComponentId;
		
		private System.Nullable<int> _IntLocationId;
		
		private EntityRef<NewEquipment> _NewEquipment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIntMeteredIdChanging(int value);
    partial void OnIntMeteredIdChanged();
    partial void OnIntEquipmentIDChanging(int value);
    partial void OnIntEquipmentIDChanged();
    partial void OnDMeterDateChanging(System.DateTime value);
    partial void OnDMeterDateChanged();
    partial void OnIntMeterReadingChanging(double value);
    partial void OnIntMeterReadingChanged();
    partial void OnIntHoursHoursOperationChanging(System.Nullable<double> value);
    partial void OnIntHoursHoursOperationChanged();
    partial void OnIntTotalMeterChanging(System.Nullable<double> value);
    partial void OnIntTotalMeterChanged();
    partial void OnBoolMeterReplacedChanging(bool value);
    partial void OnBoolMeterReplacedChanged();
    partial void OnIntTypeMeteredChanging(int value);
    partial void OnIntTypeMeteredChanged();
    partial void OnIntComponentIdChanging(System.Nullable<int> value);
    partial void OnIntComponentIdChanged();
    partial void OnIntLocationIdChanging(System.Nullable<int> value);
    partial void OnIntLocationIdChanged();
    #endregion
		
		public TrackMeter()
		{
			this._NewEquipment = default(EntityRef<NewEquipment>);
			OnCreated();
		}
		
		[Column(Name="intMeteredId", Storage="_IntMeteredId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IntMeteredId
		{
			get
			{
				return this._IntMeteredId;
			}
			set
			{
				if ((this._IntMeteredId != value))
				{
					this.OnIntMeteredIdChanging(value);
					this.SendPropertyChanging();
					this._IntMeteredId = value;
					this.SendPropertyChanged("IntMeteredId");
					this.OnIntMeteredIdChanged();
				}
			}
		}
		
		[Column(Name="intEquipmentID", Storage="_IntEquipmentID", DbType="Int NOT NULL")]
		public int IntEquipmentID
		{
			get
			{
				return this._IntEquipmentID;
			}
			set
			{
				if ((this._IntEquipmentID != value))
				{
					this.OnIntEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._IntEquipmentID = value;
					this.SendPropertyChanged("IntEquipmentID");
					this.OnIntEquipmentIDChanged();
				}
			}
		}
		
		[Column(Name="dMeterDate", Storage="_DMeterDate", DbType="Date NOT NULL")]
		public System.DateTime DMeterDate
		{
			get
			{
				return this._DMeterDate;
			}
			set
			{
				if ((this._DMeterDate != value))
				{
					this.OnDMeterDateChanging(value);
					this.SendPropertyChanging();
					this._DMeterDate = value;
					this.SendPropertyChanged("DMeterDate");
					this.OnDMeterDateChanged();
				}
			}
		}
		
		[Column(Name="intMeterReading", Storage="_IntMeterReading", DbType="Float NOT NULL")]
		public double IntMeterReading
		{
			get
			{
				return this._IntMeterReading;
			}
			set
			{
				if ((this._IntMeterReading != value))
				{
					this.OnIntMeterReadingChanging(value);
					this.SendPropertyChanging();
					this._IntMeterReading = value;
					this.SendPropertyChanged("IntMeterReading");
					this.OnIntMeterReadingChanged();
				}
			}
		}
		
		[Column(Name="intHoursHoursOperation", Storage="_IntHoursHoursOperation", DbType="Float")]
		public System.Nullable<double> IntHoursHoursOperation
		{
			get
			{
				return this._IntHoursHoursOperation;
			}
			set
			{
				if ((this._IntHoursHoursOperation != value))
				{
					this.OnIntHoursHoursOperationChanging(value);
					this.SendPropertyChanging();
					this._IntHoursHoursOperation = value;
					this.SendPropertyChanged("IntHoursHoursOperation");
					this.OnIntHoursHoursOperationChanged();
				}
			}
		}
		
		[Column(Name="intTotalMeter", Storage="_IntTotalMeter", DbType="Float")]
		public System.Nullable<double> IntTotalMeter
		{
			get
			{
				return this._IntTotalMeter;
			}
			set
			{
				if ((this._IntTotalMeter != value))
				{
					this.OnIntTotalMeterChanging(value);
					this.SendPropertyChanging();
					this._IntTotalMeter = value;
					this.SendPropertyChanged("IntTotalMeter");
					this.OnIntTotalMeterChanged();
				}
			}
		}
		
		[Column(Name="boolMeterReplaced", Storage="_BoolMeterReplaced", DbType="Bit NOT NULL")]
		public bool BoolMeterReplaced
		{
			get
			{
				return this._BoolMeterReplaced;
			}
			set
			{
				if ((this._BoolMeterReplaced != value))
				{
					this.OnBoolMeterReplacedChanging(value);
					this.SendPropertyChanging();
					this._BoolMeterReplaced = value;
					this.SendPropertyChanged("BoolMeterReplaced");
					this.OnBoolMeterReplacedChanged();
				}
			}
		}
		
		[Column(Name="intTypeMetered", Storage="_IntTypeMetered", DbType="Int NOT NULL")]
		public int IntTypeMetered
		{
			get
			{
				return this._IntTypeMetered;
			}
			set
			{
				if ((this._IntTypeMetered != value))
				{
					this.OnIntTypeMeteredChanging(value);
					this.SendPropertyChanging();
					this._IntTypeMetered = value;
					this.SendPropertyChanged("IntTypeMetered");
					this.OnIntTypeMeteredChanged();
				}
			}
		}
		
		[Column(Name="intComponentId", Storage="_IntComponentId", DbType="Int")]
		public System.Nullable<int> IntComponentId
		{
			get
			{
				return this._IntComponentId;
			}
			set
			{
				if ((this._IntComponentId != value))
				{
					this.OnIntComponentIdChanging(value);
					this.SendPropertyChanging();
					this._IntComponentId = value;
					this.SendPropertyChanged("IntComponentId");
					this.OnIntComponentIdChanged();
				}
			}
		}
		
		[Column(Name="intLocationId", Storage="_IntLocationId", DbType="Int")]
		public System.Nullable<int> IntLocationId
		{
			get
			{
				return this._IntLocationId;
			}
			set
			{
				if ((this._IntLocationId != value))
				{
					this.OnIntLocationIdChanging(value);
					this.SendPropertyChanging();
					this._IntLocationId = value;
					this.SendPropertyChanged("IntLocationId");
					this.OnIntLocationIdChanged();
				}
			}
		}
		
		[Association(Name="FK_TrackMeter_newEquipment", Storage="_NewEquipment", ThisKey="IntEquipmentID", OtherKey="IntEquipmentID", IsForeignKey=true)]
		public NewEquipment NewEquipment
		{
			get
			{
				return this._NewEquipment.Entity;
			}
			set
			{
				NewEquipment previousValue = this._NewEquipment.Entity;
				if (((previousValue != value) 
							|| (this._NewEquipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewEquipment.Entity = null;
						previousValue.TrackMeter.Remove(this);
					}
					this._NewEquipment.Entity = value;
					if ((value != null))
					{
						value.TrackMeter.Add(this);
						this._IntEquipmentID = value.IntEquipmentID;
					}
					else
					{
						this._IntEquipmentID = default(int);
					}
					this.SendPropertyChanged("NewEquipment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
